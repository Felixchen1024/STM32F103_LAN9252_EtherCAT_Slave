<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [Last_chance_lan_at403\Last_chance_lan_at403.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image Last_chance_lan_at403\Last_chance_lan_at403.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Wed Jun 02 16:11:28 2021
<BR><P>
<H3>Maximum Stack Usage =        484 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; MainLoop &rArr; ECAT_Main &rArr; MBX_Main &rArr; MailboxServiceInd &rArr; COE_ServiceInd &rArr; SDOS_SdoInd &rArr; SdoRes &rArr; MBX_MailboxSendReq &rArr; MBX_CopyToSendMailbox &rArr; HW_EscRead &rArr; PDI_Isr &rArr; PDO_OutputMapping &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1d]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[74]">HW_EscWrite</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ce]">PDI_Isr</a><BR>
 <LI><a href="#[71]">APPL_InputMapping</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[72]">HW_EscRead</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1d]">ADC1_2_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3a]">ADC3_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[5]">BusFault_Handler</a> from stm32f1xx_it.o(i.BusFault_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[20]">CAN1_RX1_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[21]">CAN1_SCE_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[16]">DMA1_Channel1_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[17]">DMA1_Channel2_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[18]">DMA1_Channel3_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[19]">DMA1_Channel4_IRQHandler</a> from stm32f1xx_it.o(i.DMA1_Channel4_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel5_IRQHandler</a> from stm32f1xx_it.o(i.DMA1_Channel5_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel6_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel7_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[43]">DMA2_Channel1_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[44]">DMA2_Channel2_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[45]">DMA2_Channel3_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[46]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from stm32f1xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[11]">EXTI0_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[33]">EXTI15_10_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[12]">EXTI1_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[13]">EXTI2_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[14]">EXTI3_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[15]">EXTI4_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[22]">EXTI9_5_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[f]">FLASH_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3b]">FSMC_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from stm32f1xx_it.o(i.HardFault_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2b]">I2C1_ER_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2a]">I2C1_EV_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2d]">I2C2_ER_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2c]">I2C2_EV_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[4]">MemManage_Handler</a> from stm32f1xx_it.o(i.MemManage_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from stm32f1xx_it.o(i.NMI_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[c]">PVD_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from stm32f1xx_it.o(i.PendSV_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[10]">RCC_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[34]">RTC_Alarm_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[e]">RTC_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[0]">Read0x10F8</a> from coeappl.o(i.Read0x10F8) referenced 2 times from coeappl.o(.data)
 <LI><a href="#[1]">Reset_Handler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3c]">SDIO_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2e]">SPI1_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2f]">SPI2_IRQHandler</a> from stm32f1xx_it.o(i.SPI2_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3e]">SPI3_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[4a]">SPI_DMAAbortOnError</a> from stm32f1xx_hal_spi.o(i.SPI_DMAAbortOnError) referenced from stm32f1xx_hal_spi.o(i.HAL_SPI_IRQHandler)
 <LI><a href="#[4d]">SPI_DMAError</a> from stm32f1xx_hal_spi.o(i.SPI_DMAError) referenced from stm32f1xx_hal_spi.o(i.HAL_SPI_Receive_DMA)
 <LI><a href="#[4d]">SPI_DMAError</a> from stm32f1xx_hal_spi.o(i.SPI_DMAError) referenced from stm32f1xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
 <LI><a href="#[4d]">SPI_DMAError</a> from stm32f1xx_hal_spi.o(i.SPI_DMAError) referenced from stm32f1xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
 <LI><a href="#[4b]">SPI_DMAHalfReceiveCplt</a> from stm32f1xx_hal_spi.o(i.SPI_DMAHalfReceiveCplt) referenced from stm32f1xx_hal_spi.o(i.HAL_SPI_Receive_DMA)
 <LI><a href="#[4b]">SPI_DMAHalfReceiveCplt</a> from stm32f1xx_hal_spi.o(i.SPI_DMAHalfReceiveCplt) referenced from stm32f1xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
 <LI><a href="#[50]">SPI_DMAHalfTransmitCplt</a> from stm32f1xx_hal_spi.o(i.SPI_DMAHalfTransmitCplt) referenced from stm32f1xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
 <LI><a href="#[4e]">SPI_DMAHalfTransmitReceiveCplt</a> from stm32f1xx_hal_spi.o(i.SPI_DMAHalfTransmitReceiveCplt) referenced from stm32f1xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
 <LI><a href="#[4c]">SPI_DMAReceiveCplt</a> from stm32f1xx_hal_spi.o(i.SPI_DMAReceiveCplt) referenced from stm32f1xx_hal_spi.o(i.HAL_SPI_Receive_DMA)
 <LI><a href="#[4c]">SPI_DMAReceiveCplt</a> from stm32f1xx_hal_spi.o(i.SPI_DMAReceiveCplt) referenced from stm32f1xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
 <LI><a href="#[51]">SPI_DMATransmitCplt</a> from stm32f1xx_hal_spi.o(i.SPI_DMATransmitCplt) referenced from stm32f1xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
 <LI><a href="#[4f]">SPI_DMATransmitReceiveCplt</a> from stm32f1xx_hal_spi.o(i.SPI_DMATransmitReceiveCplt) referenced from stm32f1xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
 <LI><a href="#[7]">SVC_Handler</a> from stm32f1xx_it.o(i.SVC_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from stm32f1xx_it.o(i.SysTick_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[48]">SystemInit</a> from system_stm32f1xx.o(i.SystemInit) referenced from startup_stm32f103xg.o(.text)
 <LI><a href="#[d]">TAMPER_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[23]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[26]">TIM1_CC_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[25]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[24]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[27]">TIM2_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[28]">TIM3_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[29]">TIM4_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3d]">TIM5_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[41]">TIM6_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[42]">TIM7_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[36]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[39]">TIM8_CC_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[38]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[37]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3f]">UART4_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[40]">UART5_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[30]">USART1_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[31]">USART2_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[32]">USART3_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[35]">USBWakeUp_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[1e]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[1f]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[6]">UsageFault_Handler</a> from stm32f1xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[b]">WWDG_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[49]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f103xg.o(.text)
 <LI><a href="#[47]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[49]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(.text)
</UL>
<P><STRONG><a name="[10f]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[52]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[57]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[110]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[111]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[112]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[113]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[114]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFragment
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EOE_ServiceInd
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOS_SdoInfoInd
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOS_SdoInd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_ContinueInd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOS_SdoRes
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read0x10F8
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdoUploadSegmentInd
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdoDownloadSegmentInd
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_Write
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_Read
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_GetDesc
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_CopyToSendMailbox
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWritePDRamRegister
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIReadPDRamRegister
</UL>

<P><STRONG><a name="[f6]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOS_SdoInfoInd
</UL>

<P><STRONG><a name="[115]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[116]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[117]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[10d]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[118]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[e8]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_GetDesc
</UL>

<P><STRONG><a name="[53]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[119]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[11a]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[11b]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>AL_ControlInd</STRONG> (Thumb, 1120 bytes, Stack size 24 bytes, ecatslv.o(i.AL_ControlInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = AL_ControlInd &rArr; StartInputHandler &rArr; SendSmFailedEmergency &rArr; EMCY_SendEmergency &rArr; MBX_MailboxSendReq &rArr; MBX_CopyToSendMailbox &rArr; HW_EscRead &rArr; PDI_Isr &rArr; PDO_OutputMapping &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_StopMailboxHandler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_StartMailboxHandler
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPL_StopOutputHandler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPL_StopMailboxHandler
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPL_StopInputHandler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPL_StartOutputHandler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPL_StartMailboxHandler
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPL_StartInputHandler
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPL_GenerateMapping
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPL_AckErrorInd
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEEPROMLoadedState
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopOutputHandler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopInputHandler
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartOutputHandler
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartInputHandler
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetALStatus
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetALEventMask
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableSyncManChannel
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableSyncManChannel
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSmSettings
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackToInitTransition
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECAT_Main
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIfEcatError
</UL>

<P><STRONG><a name="[6e]"></a>AL_ControlRes</STRONG> (Thumb, 480 bytes, Stack size 16 bytes, ecatslv.o(i.AL_ControlRes))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = AL_ControlRes &rArr; MBX_StopMailboxHandler &rArr; DisableSyncManChannel &rArr; HW_EscRead &rArr; PDI_Isr &rArr; PDO_OutputMapping &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_StopMailboxHandler
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPL_StopOutputHandler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPL_StopMailboxHandler
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPL_StopInputHandler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPL_StartOutputHandler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPL_StartMailboxHandler
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPL_StartInputHandler
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopOutputHandler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopInputHandler
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetALStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECAT_Main
</UL>

<P><STRONG><a name="[6a]"></a>APPL_AckErrorInd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pic32_mchp_gpio_sample_app.o(i.APPL_AckErrorInd))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlInd
</UL>

<P><STRONG><a name="[8c]"></a>APPL_Application</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pic32_mchp_gpio_sample_app.o(i.APPL_Application))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECAT_Application
</UL>

<P><STRONG><a name="[5a]"></a>APPL_GenerateMapping</STRONG> (Thumb, 234 bytes, Stack size 48 bytes, pic32_mchp_gpio_sample_app.o(i.APPL_GenerateMapping))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = APPL_GenerateMapping &rArr; OBJ_GetEntryOffset
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_GetObjectHandle
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_GetEntryOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlInd
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10a]"></a>APPL_GetDeviceID</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pic32_mchp_gpio_sample_app.o(i.APPL_GetDeviceID))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetALStatus
</UL>

<P><STRONG><a name="[71]"></a>APPL_InputMapping</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pic32_mchp_gpio_sample_app.o(i.APPL_InputMapping))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = APPL_InputMapping &rArr;  HW_EscRead (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscRead
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDO_InputMapping
</UL>

<P><STRONG><a name="[73]"></a>APPL_OutputMapping</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pic32_mchp_gpio_sample_app.o(i.APPL_OutputMapping))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = APPL_OutputMapping &rArr; HW_EscWrite &rArr;  PDI_Isr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDO_OutputMapping
</UL>

<P><STRONG><a name="[62]"></a>APPL_StartInputHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pic32_mchp_gpio_sample_app.o(i.APPL_StartInputHandler))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlRes
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlInd
</UL>

<P><STRONG><a name="[5e]"></a>APPL_StartMailboxHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pic32_mchp_gpio_sample_app.o(i.APPL_StartMailboxHandler))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlRes
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlInd
</UL>

<P><STRONG><a name="[67]"></a>APPL_StartOutputHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pic32_mchp_gpio_sample_app.o(i.APPL_StartOutputHandler))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlRes
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlInd
</UL>

<P><STRONG><a name="[64]"></a>APPL_StopInputHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pic32_mchp_gpio_sample_app.o(i.APPL_StopInputHandler))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlRes
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlInd
</UL>

<P><STRONG><a name="[5f]"></a>APPL_StopMailboxHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pic32_mchp_gpio_sample_app.o(i.APPL_StopMailboxHandler))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlRes
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlInd
</UL>

<P><STRONG><a name="[68]"></a>APPL_StopOutputHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pic32_mchp_gpio_sample_app.o(i.APPL_StopOutputHandler))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlRes
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlInd
</UL>

<P><STRONG><a name="[75]"></a>AddObjectsToObjDictionary</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, coeappl.o(i.AddObjectsToObjDictionary))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AddObjectsToObjDictionary
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_AddObjectToDic
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_ObjDictionaryInit
</UL>

<P><STRONG><a name="[5b]"></a>BackToInitTransition</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ecatslv.o(i.BackToInitTransition))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlInd
</UL>

<P><STRONG><a name="[5]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>COE_AddObjectToDic</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, coeappl.o(i.COE_AddObjectToDic))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddObjectsToObjDictionary
</UL>

<P><STRONG><a name="[77]"></a>COE_ClearObjDictionary</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, coeappl.o(i.COE_ClearObjDictionary))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = COE_ClearObjDictionary &rArr; COE_RemoveDicEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_RemoveDicEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_ObjInit
</UL>

<P><STRONG><a name="[79]"></a>COE_ContinueInd</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ecatcoe.o(i.COE_ContinueInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = COE_ContinueInd &rArr; SDOS_SdoInfoInd &rArr; MBX_MailboxSendReq &rArr; MBX_CopyToSendMailbox &rArr; HW_EscRead &rArr; PDI_Isr &rArr; PDO_OutputMapping &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOS_SdoInfoInd
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_MailboxSendReq
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_MailboxReadInd
</UL>

<P><STRONG><a name="[eb]"></a>COE_GetObjectDictionary</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, coeappl.o(i.COE_GetObjectDictionary))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_GetObjectList
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_GetObjectHandle
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_GetNoOfObjects
</UL>

<P><STRONG><a name="[90]"></a>COE_Init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ecatcoe.o(i.COE_Init))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECAT_Init
</UL>

<P><STRONG><a name="[7e]"></a>COE_Main</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, coeappl.o(i.COE_Main))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = COE_Main &rArr; SDOS_SdoRes &rArr; SdoRes &rArr; MBX_MailboxSendReq &rArr; MBX_CopyToSendMailbox &rArr; HW_EscRead &rArr; PDI_Isr &rArr; PDO_OutputMapping &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOS_SdoRes
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainLoop
</UL>

<P><STRONG><a name="[81]"></a>COE_ObjDictionaryInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, coeappl.o(i.COE_ObjDictionaryInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = COE_ObjDictionaryInit &rArr; AddObjectsToObjDictionary
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddObjectsToObjDictionary
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_ObjInit
</UL>

<P><STRONG><a name="[82]"></a>COE_ObjInit</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, coeappl.o(i.COE_ObjInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = COE_ObjInit &rArr; HW_EscRead &rArr; PDI_Isr &rArr; PDO_OutputMapping &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscRead
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_ObjDictionaryInit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_ClearObjDictionary
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainInit
</UL>

<P><STRONG><a name="[78]"></a>COE_RemoveDicEntry</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, coeappl.o(i.COE_RemoveDicEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = COE_RemoveDicEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_ClearObjDictionary
</UL>

<P><STRONG><a name="[83]"></a>COE_ServiceInd</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ecatcoe.o(i.COE_ServiceInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = COE_ServiceInd &rArr; SDOS_SdoInd &rArr; SdoRes &rArr; MBX_MailboxSendReq &rArr; MBX_CopyToSendMailbox &rArr; HW_EscRead &rArr; PDI_Isr &rArr; PDO_OutputMapping &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOS_SdoInfoInd
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOS_SdoInd
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MailboxServiceInd
</UL>

<P><STRONG><a name="[85]"></a>COE_SyncTimeStamp</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, coeappl.o(i.COE_SyncTimeStamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = COE_SyncTimeStamp &rArr; HW_EscRead &rArr; PDI_Isr &rArr; PDO_OutputMapping &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscRead
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainLoop
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read0x10F8
</UL>

<P><STRONG><a name="[f1]"></a>COE_UpdateSyncErrorStatus</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, coeappl.o(i.COE_UpdateSyncErrorStatus))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDI_Isr
</UL>

<P><STRONG><a name="[86]"></a>CheckIfEcatError</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, ecatslv.o(i.CheckIfEcatError))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = CheckIfEcatError &rArr; AL_ControlInd &rArr; StartInputHandler &rArr; SendSmFailedEmergency &rArr; EMCY_SendEmergency &rArr; MBX_MailboxSendReq &rArr; MBX_CopyToSendMailbox &rArr; HW_EscRead &rArr; PDI_Isr &rArr; PDO_OutputMapping &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscRead
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlInd
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainLoop
</UL>

<P><STRONG><a name="[59]"></a>CheckSmSettings</STRONG> (Thumb, 636 bytes, Stack size 32 bytes, ecatslv.o(i.CheckSmSettings))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = CheckSmSettings &rArr; SendSmFailedEmergency &rArr; EMCY_SendEmergency &rArr; MBX_MailboxSendReq &rArr; MBX_CopyToSendMailbox &rArr; HW_EscRead &rArr; PDI_Isr &rArr; PDO_OutputMapping &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSmFailedEmergency
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSyncMan
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlInd
</UL>

<P><STRONG><a name="[f0]"></a>CheckSyncTypeValue</STRONG> (Thumb, 242 bytes, Stack size 0 bytes, objdef.o(i.CheckSyncTypeValue))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_Write
</UL>

<P><STRONG><a name="[19]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.DMA1_Channel4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA1_Channel4_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.DMA1_Channel5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA1_Channel5_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>DisableSyncManChannel</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ecatslv.o(i.DisableSyncManChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = DisableSyncManChannel &rArr; HW_EscRead &rArr; PDI_Isr &rArr; PDO_OutputMapping &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscRead
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECAT_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_StopMailboxHandler
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_MailboxRepeatReq
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopInputHandler
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlInd
</UL>

<P><STRONG><a name="[8a]"></a>ECAT_Application</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ecatappl.o(i.ECAT_Application))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = ECAT_Application &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPL_Application
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCycleTimeMeasurement
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDI_Isr
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainLoop
</UL>

<P><STRONG><a name="[8d]"></a>ECAT_Init</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, ecatslv.o(i.ECAT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = ECAT_Init &rArr; ResetALEventMask &rArr; HW_EscRead &rArr; PDI_Isr &rArr; PDO_OutputMapping &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_Init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscRead
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMCY_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEEPROMLoadedState
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetALStatus
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetALEventMask
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableSyncManChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainInit
</UL>

<P><STRONG><a name="[92]"></a>ECAT_Main</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, ecatslv.o(i.ECAT_Main))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = ECAT_Main &rArr; MBX_Main &rArr; MailboxServiceInd &rArr; COE_ServiceInd &rArr; SDOS_SdoInd &rArr; SdoRes &rArr; MBX_MailboxSendReq &rArr; MBX_CopyToSendMailbox &rArr; HW_EscRead &rArr; PDI_Isr &rArr; PDO_OutputMapping &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GetALEventRegister
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscRead
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_Main
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_MailboxRepeatReq
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_MailboxReadInd
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_CheckAndCopyMailbox
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscWrite
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlRes
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlInd
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainLoop
</UL>

<P><STRONG><a name="[98]"></a>EMCY_ContinueInd</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, emcy.o(i.EMCY_ContinueInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = EMCY_ContinueInd &rArr; EMCY_SendEmergency &rArr; MBX_MailboxSendReq &rArr; MBX_CopyToSendMailbox &rArr; HW_EscRead &rArr; PDI_Isr &rArr; PDO_OutputMapping &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOutOfSendEmcyQueue
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMCY_SendEmergency
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_MailboxReadInd
</UL>

<P><STRONG><a name="[9b]"></a>EMCY_GetEmcyBuffer</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, emcy.o(i.EMCY_GetEmcyBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EMCY_GetEmcyBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOutOfEmptyEmcyQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSmFailedEmergency
</UL>

<P><STRONG><a name="[8f]"></a>EMCY_Init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, emcy.o(i.EMCY_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EMCY_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutInEmptyEmcyQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECAT_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_StopMailboxHandler
</UL>

<P><STRONG><a name="[da]"></a>EMCY_IsQueueEmpty</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, emcy.o(i.EMCY_IsQueueEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_Main
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_MailboxReadInd
</UL>

<P><STRONG><a name="[9a]"></a>EMCY_SendEmergency</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, emcy.o(i.EMCY_SendEmergency))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = EMCY_SendEmergency &rArr; MBX_MailboxSendReq &rArr; MBX_CopyToSendMailbox &rArr; HW_EscRead &rArr; PDI_Isr &rArr; PDO_OutputMapping &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_MailboxSendReq
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutInSendEmcyQueue
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutInEmptyEmcyQueue
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMCY_ContinueInd
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_Main
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSmFailedEmergency
</UL>

<P><STRONG><a name="[a5]"></a>EOEAPPL_GetSettingsInd</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, eoeappl.o(i.EOEAPPL_GetSettingsInd))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EOE_ServiceInd
</UL>

<P><STRONG><a name="[a3]"></a>EOEAPPL_ReceiveFrameInd</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, eoeappl.o(i.EOEAPPL_ReceiveFrameInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EOEAPPL_ReceiveFrameInd
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EOE_ServiceInd
</UL>

<P><STRONG><a name="[a4]"></a>EOEAPPL_SettingsInd</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, eoeappl.o(i.EOEAPPL_SettingsInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EOEAPPL_SettingsInd
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EOE_ServiceInd
</UL>

<P><STRONG><a name="[9f]"></a>EOE_ContinueInd</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ecateoe.o(i.EOE_ContinueInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = EOE_ContinueInd &rArr; SendFragment &rArr; MBX_MailboxSendReq &rArr; MBX_CopyToSendMailbox &rArr; HW_EscRead &rArr; PDI_Isr &rArr; PDO_OutputMapping &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFragment
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_MailboxSendReq
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_MailboxReadInd
</UL>

<P><STRONG><a name="[a1]"></a>EOE_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ecateoe.o(i.EOE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EOE_Init &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_StopMailboxHandler
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_Init
</UL>

<P><STRONG><a name="[a2]"></a>EOE_ServiceInd</STRONG> (Thumb, 666 bytes, Stack size 40 bytes, ecateoe.o(i.EOE_ServiceInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = EOE_ServiceInd &rArr; MBX_MailboxSendReq &rArr; MBX_CopyToSendMailbox &rArr; HW_EscRead &rArr; PDI_Isr &rArr; PDO_OutputMapping &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EOEAPPL_SettingsInd
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EOEAPPL_ReceiveFrameInd
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EOEAPPL_GetSettingsInd
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_MailboxSendReq
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MailboxServiceInd
</UL>

<P><STRONG><a name="[6b]"></a>EnableSyncManChannel</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ecatslv.o(i.EnableSyncManChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = EnableSyncManChannel &rArr; HW_EscRead &rArr; PDI_Isr &rArr; PDO_OutputMapping &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscRead
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_StartMailboxHandler
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_MailboxRepeatReq
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartInputHandler
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlInd
</UL>

<P><STRONG><a name="[c7]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
</UL>

<P><STRONG><a name="[a7]"></a>FOE_Ack</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, foeappl.o(i.FOE_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FOE_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOE_Busy
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOE_ServiceInd
</UL>

<P><STRONG><a name="[a6]"></a>FOE_Busy</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, foeappl.o(i.FOE_Busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FOE_Busy &rArr; FOE_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOE_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOE_ServiceInd
</UL>

<P><STRONG><a name="[a8]"></a>FOE_ContinueInd</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ecatfoe.o(i.FOE_ContinueInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = FOE_ContinueInd &rArr; MBX_MailboxSendReq &rArr; MBX_CopyToSendMailbox &rArr; HW_EscRead &rArr; PDI_Isr &rArr; PDO_OutputMapping &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_MailboxSendReq
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_MailboxReadInd
</UL>

<P><STRONG><a name="[ac]"></a>FOE_Data</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, foeappl.o(i.FOE_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FOE_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOE_ServiceInd
</UL>

<P><STRONG><a name="[ad]"></a>FOE_Error</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, foeappl.o(i.FOE_Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FOE_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOE_ServiceInd
</UL>

<P><STRONG><a name="[de]"></a>FOE_Init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ecatfoe.o(i.FOE_Init))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_StopMailboxHandler
</UL>

<P><STRONG><a name="[aa]"></a>FOE_Read</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, foeappl.o(i.FOE_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FOE_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOE_ServiceInd
</UL>

<P><STRONG><a name="[a9]"></a>FOE_ServiceInd</STRONG> (Thumb, 638 bytes, Stack size 24 bytes, ecatfoe.o(i.FOE_ServiceInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = FOE_ServiceInd &rArr; MBX_MailboxSendReq &rArr; MBX_CopyToSendMailbox &rArr; HW_EscRead &rArr; PDI_Isr &rArr; PDO_OutputMapping &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOE_Write
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOE_Read
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOE_Error
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOE_Data
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOE_Busy
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOE_Ack
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_MailboxSendReq
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MailboxServiceInd
</UL>

<P><STRONG><a name="[ab]"></a>FOE_Write</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, foeappl.o(i.FOE_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FOE_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOE_ServiceInd
</UL>

<P><STRONG><a name="[9c]"></a>GetOutOfEmptyEmcyQueue</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, emcy.o(i.GetOutOfEmptyEmcyQueue))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMCY_GetEmcyBuffer
</UL>

<P><STRONG><a name="[d9]"></a>GetOutOfMbxQueue</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, mailbox.o(i.GetOutOfMbxQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetOutOfMbxQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_StopMailboxHandler
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_Main
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_MailboxReadInd
</UL>

<P><STRONG><a name="[99]"></a>GetOutOfSendEmcyQueue</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, emcy.o(i.GetOutOfSendEmcyQueue))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMCY_ContinueInd
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_Main
</UL>

<P><STRONG><a name="[87]"></a>GetSyncMan</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ecatslv.o(i.GetSyncMan))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = GetSyncMan &rArr; HW_EscRead &rArr; PDI_Isr &rArr; PDO_OutputMapping &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscRead
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_StartMailboxHandler
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartInputHandler
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSmSettings
</UL>

<P><STRONG><a name="[b0]"></a>GetSystemTimeDelay</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ecatappl.o(i.GetSystemTimeDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscReadIsr
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDO_OutputMapping
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDO_InputMapping
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCycleTimeMeasurement
</UL>

<P><STRONG><a name="[c1]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 414 bytes, Stack size 16 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
</UL>

<P><STRONG><a name="[89]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 910 bytes, Stack size 16 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel5_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
</UL>

<P><STRONG><a name="[c6]"></a>HAL_DMA_Init</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>

<P><STRONG><a name="[b1]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_DMA
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit_DMA
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive_DMA
</UL>

<P><STRONG><a name="[c5]"></a>HAL_GPIO_Init</STRONG> (Thumb, 792 bytes, Stack size 36 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[cd]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscRead
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscWrite
</UL>

<P><STRONG><a name="[10e]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e1]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWritePDRamRegister
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIReadPDRamRegister
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWriteDWord
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIReadDWord
</UL>

<P><STRONG><a name="[bc]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitReceiveCplt
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitCplt
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAReceiveCplt
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[10b]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[b3]"></a>HAL_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f1xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5]"></a>HAL_InitTick</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[b6]"></a>HAL_MspInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f1xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[c8]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[b8]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[b4]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[bb]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 376 bytes, Stack size 16 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[bd]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[be]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1114 bytes, Stack size 24 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_OscConfig &rArr; RCC_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[c2]"></a>HAL_SPI_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_spi.o(i.HAL_SPI_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitReceiveCplt
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitCplt
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAReceiveCplt
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAError
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAAbortOnError
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
</UL>

<P><STRONG><a name="[c0]"></a>HAL_SPI_IRQHandler</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, stm32f1xx_hal_spi.o(i.HAL_SPI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_SPI_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_IRQHandler
</UL>

<P><STRONG><a name="[c3]"></a>HAL_SPI_Init</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, stm32f1xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
</UL>

<P><STRONG><a name="[c4]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, stm32f1xx_hal_msp.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[c9]"></a>HAL_SPI_Receive_DMA</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, stm32f1xx_hal_spi.o(i.HAL_SPI_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIRead
</UL>

<P><STRONG><a name="[105]"></a>HAL_SPI_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_spi.o(i.HAL_SPI_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAReceiveCplt
</UL>

<P><STRONG><a name="[101]"></a>HAL_SPI_RxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_spi.o(i.HAL_SPI_RxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAHalfReceiveCplt
</UL>

<P><STRONG><a name="[ca]"></a>HAL_SPI_TransmitReceive_DMA</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, stm32f1xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive_DMA
</UL>

<P><STRONG><a name="[cb]"></a>HAL_SPI_Transmit_DMA</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, stm32f1xx_hal_spi.o(i.HAL_SPI_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_SPI_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWrite
</UL>

<P><STRONG><a name="[107]"></a>HAL_SPI_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_spi.o(i.HAL_SPI_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitCplt
</UL>

<P><STRONG><a name="[102]"></a>HAL_SPI_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_spi.o(i.HAL_SPI_TxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAHalfTransmitCplt
</UL>

<P><STRONG><a name="[108]"></a>HAL_SPI_TxRxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_spi.o(i.HAL_SPI_TxRxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitReceiveCplt
</UL>

<P><STRONG><a name="[103]"></a>HAL_SPI_TxRxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_spi.o(i.HAL_SPI_TxRxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAHalfTransmitReceiveCplt
</UL>

<P><STRONG><a name="[b7]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[72]"></a>HW_EscRead</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, 9252_hw.o(i.HW_EscRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = HW_EscRead &rArr; PDI_Isr &rArr; PDO_OutputMapping &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDI_Isr
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIReadDRegister
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECAT_Main
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECAT_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIfEcatError
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPL_InputMapping
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_SyncTimeStamp
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_ObjInit
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_CopyToSendMailbox
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_StopMailboxHandler
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_CheckAndCopyMailbox
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEEPROMLoadedState
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartInputHandler
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetALEventMask
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetALEventMask
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSyncMan
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableSyncManChannel
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableSyncManChannel
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_ResetALEventMask
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[af]"></a>HW_EscReadIsr</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, 9252_hw.o(i.HW_EscReadIsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIReadDRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDO_OutputMapping
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDI_Isr
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainInit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTimeDelay
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_GetInterruptRegister
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInterruptRegister
</UL>

<P><STRONG><a name="[74]"></a>HW_EscWrite</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, 9252_hw.o(i.HW_EscWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + In Cycle
<LI>Call Chain = HW_EscWrite &rArr;  PDI_Isr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDI_Isr
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWriteRegister
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECAT_Main
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPL_OutputMapping
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_CopyToSendMailbox
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_StopMailboxHandler
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetALStatus
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetALEventMask
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetALEventMask
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableSyncManChannel
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableSyncManChannel
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_ResetALEventMask
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[d0]"></a>HW_EscWriteIsr</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, 9252_hw.o(i.HW_EscWriteIsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = HW_EscWriteIsr &rArr; SPIWriteRegister &rArr; SPIWritePDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDO_InputMapping
</UL>

<P><STRONG><a name="[94]"></a>HW_GetALEventRegister</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, 9252_hw.o(i.HW_GetALEventRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = HW_GetALEventRegister &rArr; GetInterruptRegister &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInterruptRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECAT_Main
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainLoop
</UL>

<P><STRONG><a name="[d1]"></a>HW_GetALEventRegister_Isr</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, 9252_hw.o(i.HW_GetALEventRegister_Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = HW_GetALEventRegister_Isr &rArr; ISR_GetInterruptRegister &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_GetInterruptRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDO_InputMapping
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDI_Isr
</UL>

<P><STRONG><a name="[d3]"></a>HW_Init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, 9252_hw.o(i.HW_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = HW_Init &rArr; HW_ResetALEventMask &rArr; HW_EscRead &rArr; PDI_Isr &rArr; PDO_OutputMapping &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscRead
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscWrite
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWriteDWord
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIReadDWord
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_ResetALEventMask
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d6]"></a>HW_ResetALEventMask</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, 9252_hw.o(i.HW_ResetALEventMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = HW_ResetALEventMask &rArr; HW_EscRead &rArr; PDI_Isr &rArr; PDO_OutputMapping &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscRead
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[8b]"></a>HandleCycleTimeMeasurement</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, ecatappl.o(i.HandleCycleTimeMeasurement))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTimeDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDO_OutputMapping
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECAT_Application
</UL>

<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>MBX_CheckAndCopyMailbox</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, mailbox.o(i.MBX_CheckAndCopyMailbox))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = MBX_CheckAndCopyMailbox &rArr; MBX_MailboxWriteInd &rArr; MBX_MailboxSendReq &rArr; MBX_CopyToSendMailbox &rArr; HW_EscRead &rArr; PDI_Isr &rArr; PDO_OutputMapping &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_MailboxSendReq
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscRead
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_MailboxWriteInd
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECAT_Main
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_Main
</UL>

<P><STRONG><a name="[d8]"></a>MBX_CopyToSendMailbox</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, mailbox.o(i.MBX_CopyToSendMailbox))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = MBX_CopyToSendMailbox &rArr; HW_EscRead &rArr; PDI_Isr &rArr; PDO_OutputMapping &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscRead
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscWrite
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_MailboxSendReq
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_MailboxRepeatReq
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_MailboxReadInd
</UL>

<P><STRONG><a name="[8e]"></a>MBX_Init</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, mailbox.o(i.MBX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = MBX_Init &rArr; HW_EscRead &rArr; PDI_Isr &rArr; PDO_OutputMapping &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EOE_Init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscRead
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECAT_Init
</UL>

<P><STRONG><a name="[95]"></a>MBX_MailboxReadInd</STRONG> (Thumb, 242 bytes, Stack size 8 bytes, mailbox.o(i.MBX_MailboxReadInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = MBX_MailboxReadInd &rArr; COE_ContinueInd &rArr; SDOS_SdoInfoInd &rArr; MBX_MailboxSendReq &rArr; MBX_CopyToSendMailbox &rArr; HW_EscRead &rArr; PDI_Isr &rArr; PDO_OutputMapping &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOE_ContinueInd
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EOE_ContinueInd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_ContinueInd
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_CopyToSendMailbox
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOutOfMbxQueue
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMCY_IsQueueEmpty
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMCY_ContinueInd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECAT_Main
</UL>

<P><STRONG><a name="[96]"></a>MBX_MailboxRepeatReq</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, mailbox.o(i.MBX_MailboxRepeatReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = MBX_MailboxRepeatReq &rArr; MBX_CopyToSendMailbox &rArr; HW_EscRead &rArr; PDI_Isr &rArr; PDO_OutputMapping &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_CopyToSendMailbox
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableSyncManChannel
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableSyncManChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECAT_Main
</UL>

<P><STRONG><a name="[7a]"></a>MBX_MailboxSendReq</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, mailbox.o(i.MBX_MailboxSendReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = MBX_MailboxSendReq &rArr; MBX_CopyToSendMailbox &rArr; HW_EscRead &rArr; PDI_Isr &rArr; PDO_OutputMapping &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutInMbxQueue
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_CopyToSendMailbox
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOE_ServiceInd
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOE_ContinueInd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFragment
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EOE_ServiceInd
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EOE_ContinueInd
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOS_SdoInfoInd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_ContinueInd
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdoRes
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_MailboxWriteInd
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_Main
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_CheckAndCopyMailbox
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMCY_SendEmergency
</UL>

<P><STRONG><a name="[d7]"></a>MBX_MailboxWriteInd</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, mailbox.o(i.MBX_MailboxWriteInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = MBX_MailboxWriteInd &rArr; MBX_MailboxSendReq &rArr; MBX_CopyToSendMailbox &rArr; HW_EscRead &rArr; PDI_Isr &rArr; PDO_OutputMapping &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_MailboxSendReq
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutInMbxQueue
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_CheckAndCopyMailbox
</UL>

<P><STRONG><a name="[93]"></a>MBX_Main</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, mailbox.o(i.MBX_Main))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = MBX_Main &rArr; MailboxServiceInd &rArr; COE_ServiceInd &rArr; SDOS_SdoInd &rArr; SdoRes &rArr; MBX_MailboxSendReq &rArr; MBX_CopyToSendMailbox &rArr; HW_EscRead &rArr; PDI_Isr &rArr; PDO_OutputMapping &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_MailboxSendReq
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MailboxServiceInd
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOutOfMbxQueue
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOutOfSendEmcyQueue
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMCY_IsQueueEmpty
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_CheckAndCopyMailbox
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMCY_SendEmergency
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECAT_Main
</UL>

<P><STRONG><a name="[5d]"></a>MBX_StartMailboxHandler</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, mailbox.o(i.MBX_StartMailboxHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = MBX_StartMailboxHandler &rArr; EnableSyncManChannel &rArr; HW_EscRead &rArr; PDI_Isr &rArr; PDO_OutputMapping &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSyncMan
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableSyncManChannel
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlInd
</UL>

<P><STRONG><a name="[60]"></a>MBX_StopMailboxHandler</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, mailbox.o(i.MBX_StopMailboxHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = MBX_StopMailboxHandler &rArr; DisableSyncManChannel &rArr; HW_EscRead &rArr; PDI_Isr &rArr; PDO_OutputMapping &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOE_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EOE_Init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscRead
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SODS_ClearPendingResponse
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOutOfMbxQueue
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscWrite
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMCY_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableSyncManChannel
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlRes
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlInd
</UL>

<P><STRONG><a name="[dc]"></a>MailboxServiceInd</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, mailbox.o(i.MailboxServiceInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = MailboxServiceInd &rArr; COE_ServiceInd &rArr; SDOS_SdoInd &rArr; SdoRes &rArr; MBX_MailboxSendReq &rArr; MBX_CopyToSendMailbox &rArr; HW_EscRead &rArr; PDI_Isr &rArr; PDO_OutputMapping &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOE_ServiceInd
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EOE_ServiceInd
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_ServiceInd
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_Main
</UL>

<P><STRONG><a name="[e3]"></a>MainInit</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, ecatappl.o(i.MainInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = MainInit &rArr; ECAT_Init &rArr; ResetALEventMask &rArr; HW_EscRead &rArr; PDI_Isr &rArr; PDO_OutputMapping &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscReadIsr
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECAT_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_ObjInit
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e4]"></a>MainLoop</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, ecatappl.o(i.MainLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = MainLoop &rArr; ECAT_Main &rArr; MBX_Main &rArr; MailboxServiceInd &rArr; COE_ServiceInd &rArr; SDOS_SdoInd &rArr; SdoRes &rArr; MBX_MailboxSendReq &rArr; MBX_CopyToSendMailbox &rArr; HW_EscRead &rArr; PDI_Isr &rArr; PDO_OutputMapping &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GetALEventRegister
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECAT_Main
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIfEcatError
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDO_OutputMapping
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDO_InputMapping
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECAT_Application
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_SyncTimeStamp
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_Main
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[e9]"></a>OBJ_CopyNumberToString</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, objdef.o(i.OBJ_CopyNumberToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OBJ_CopyNumberToString
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_GetDesc
</UL>

<P><STRONG><a name="[e7]"></a>OBJ_GetDesc</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, objdef.o(i.OBJ_GetDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OBJ_GetDesc &rArr; OBJ_CopyNumberToString
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_CopyNumberToString
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOS_SdoInfoInd
</UL>

<P><STRONG><a name="[ec]"></a>OBJ_GetEntryDesc</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, objdef.o(i.OBJ_GetEntryDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OBJ_GetEntryDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOS_SdoInfoInd
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_Write
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_Read
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_GetObjectList
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_GetNoOfObjects
</UL>

<P><STRONG><a name="[70]"></a>OBJ_GetEntryOffset</STRONG> (Thumb, 262 bytes, Stack size 20 bytes, objdef.o(i.OBJ_GetEntryOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OBJ_GetEntryOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_Write
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_Read
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPL_GenerateMapping
</UL>

<P><STRONG><a name="[ea]"></a>OBJ_GetNoOfObjects</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, objdef.o(i.OBJ_GetNoOfObjects))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = OBJ_GetNoOfObjects &rArr; OBJ_GetEntryDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_GetObjectDictionary
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_GetEntryDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOS_SdoInfoInd
</UL>

<P><STRONG><a name="[f7]"></a>OBJ_GetObjDesc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, objdef.o(i.OBJ_GetObjDesc))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOS_SdoInfoInd
</UL>

<P><STRONG><a name="[6f]"></a>OBJ_GetObjectHandle</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, objdef.o(i.OBJ_GetObjectHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OBJ_GetObjectHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_GetObjectDictionary
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOS_SdoInfoInd
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOS_SdoInd
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPL_GenerateMapping
</UL>

<P><STRONG><a name="[f2]"></a>OBJ_GetObjectLength</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, objdef.o(i.OBJ_GetObjectLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OBJ_GetObjectLength
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOS_SdoInd
</UL>

<P><STRONG><a name="[ed]"></a>OBJ_GetObjectList</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, objdef.o(i.OBJ_GetObjectList))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = OBJ_GetObjectList &rArr; OBJ_GetEntryDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_GetObjectDictionary
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_GetEntryDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOS_SdoInfoInd
</UL>

<P><STRONG><a name="[ee]"></a>OBJ_Read</STRONG> (Thumb, 1140 bytes, Stack size 80 bytes, objdef.o(i.OBJ_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = OBJ_Read &rArr; OBJ_GetEntryOffset
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_GetEntryOffset
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_GetEntryDesc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOS_SdoInd
</UL>

<P><STRONG><a name="[ef]"></a>OBJ_Write</STRONG> (Thumb, 1310 bytes, Stack size 88 bytes, objdef.o(i.OBJ_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = OBJ_Write &rArr; OBJ_GetEntryOffset
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_GetEntryOffset
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_GetEntryDesc
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSyncTypeValue
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOS_SdoInd
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdoDownloadSegmentInd
</UL>

<P><STRONG><a name="[ce]"></a>PDI_Isr</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, ecatappl.o(i.PDI_Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = PDI_Isr &rArr; PDO_OutputMapping &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GetALEventRegister_Isr
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscReadIsr
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDO_OutputMapping
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDO_InputMapping
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECAT_Application
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_UpdateSyncErrorStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscRead
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscWrite
</UL>

<P><STRONG><a name="[e6]"></a>PDO_InputMapping</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, ecatappl.o(i.PDO_InputMapping))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = PDO_InputMapping &rArr; HW_GetALEventRegister_Isr &rArr; ISR_GetInterruptRegister &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GetALEventRegister_Isr
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscWriteIsr
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPL_InputMapping
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTimeDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDI_Isr
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainLoop
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartInputHandler
</UL>

<P><STRONG><a name="[e5]"></a>PDO_OutputMapping</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, ecatappl.o(i.PDO_OutputMapping))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = PDO_OutputMapping &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscReadIsr
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPL_OutputMapping
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCycleTimeMeasurement
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTimeDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDI_Isr
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainLoop
</UL>

<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>PutInEmptyEmcyQueue</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, emcy.o(i.PutInEmptyEmcyQueue))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMCY_SendEmergency
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMCY_Init
</UL>

<P><STRONG><a name="[db]"></a>PutInMbxQueue</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mailbox.o(i.PutInMbxQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PutInMbxQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_MailboxSendReq
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_MailboxWriteInd
</UL>

<P><STRONG><a name="[9e]"></a>PutInSendEmcyQueue</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, emcy.o(i.PutInSendEmcyQueue))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMCY_SendEmergency
</UL>

<P><STRONG><a name="[0]"></a>Read0x10F8</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, coeappl.o(i.Read0x10F8))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = Read0x10F8 &rArr; COE_SyncTimeStamp &rArr; HW_EscRead &rArr; PDI_Isr &rArr; PDO_OutputMapping &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_SyncTimeStamp
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coeappl.o(.data)
</UL>
<P><STRONG><a name="[91]"></a>ResetALEventMask</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ecatslv.o(i.ResetALEventMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = ResetALEventMask &rArr; HW_EscRead &rArr; PDI_Isr &rArr; PDO_OutputMapping &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscRead
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECAT_Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopInputHandler
</UL>

<P><STRONG><a name="[84]"></a>SDOS_SdoInd</STRONG> (Thumb, 1112 bytes, Stack size 72 bytes, sdoserv.o(i.SDOS_SdoInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = SDOS_SdoInd &rArr; SdoRes &rArr; MBX_MailboxSendReq &rArr; MBX_CopyToSendMailbox &rArr; HW_EscRead &rArr; PDI_Isr &rArr; PDO_OutputMapping &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdoRes
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdoUploadSegmentInd
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdoDownloadSegmentInd
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_Write
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_Read
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_GetObjectLength
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_GetObjectHandle
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_ServiceInd
</UL>

<P><STRONG><a name="[7d]"></a>SDOS_SdoInfoInd</STRONG> (Thumb, 712 bytes, Stack size 48 bytes, sdoserv.o(i.SDOS_SdoInfoInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = SDOS_SdoInfoInd &rArr; MBX_MailboxSendReq &rArr; MBX_CopyToSendMailbox &rArr; HW_EscRead &rArr; PDI_Isr &rArr; PDO_OutputMapping &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_MailboxSendReq
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_GetObjectList
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_GetObjectHandle
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_GetObjDesc
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_GetNoOfObjects
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_GetEntryDesc
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_GetDesc
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_ServiceInd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_ContinueInd
</UL>

<P><STRONG><a name="[80]"></a>SDOS_SdoRes</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, sdoserv.o(i.SDOS_SdoRes))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = SDOS_SdoRes &rArr; SdoRes &rArr; MBX_MailboxSendReq &rArr; MBX_CopyToSendMailbox &rArr; HW_EscRead &rArr; PDI_Isr &rArr; PDO_OutputMapping &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdoRes
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_Main
</UL>

<P><STRONG><a name="[dd]"></a>SODS_ClearPendingResponse</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, sdoserv.o(i.SODS_ClearPendingResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SODS_ClearPendingResponse &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_StopMailboxHandler
</UL>

<P><STRONG><a name="[2f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.SPI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI2_IRQHandler &rArr; HAL_SPI_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[f8]"></a>SPIRead</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, spidriver.o(i.SPIRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIReadBurstMode
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIReadDWord
</UL>

<P><STRONG><a name="[f9]"></a>SPIReadBurstMode</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, spidriver.o(i.SPIReadBurstMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SPIReadBurstMode &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIRead
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIReadPDRamRegister
</UL>

<P><STRONG><a name="[cc]"></a>SPIReadDRegister</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, spidriver.o(i.SPIReadDRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIReadRegUsingCSR
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIReadPDRamRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscReadIsr
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscRead
</UL>

<P><STRONG><a name="[d5]"></a>SPIReadDWord</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, spidriver.o(i.SPIReadDWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWrite
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIRead
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWriteRegUsingCSR
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWritePDRamRegister
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIReadRegUsingCSR
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIReadPDRamRegister
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[fa]"></a>SPIReadPDRamRegister</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, spidriver.o(i.SPIReadPDRamRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWrite
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPISendAddr
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIReadBurstMode
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWriteDWord
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIReadDWord
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIReadDRegister
</UL>

<P><STRONG><a name="[fb]"></a>SPIReadRegUsingCSR</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, spidriver.o(i.SPIReadRegUsingCSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = SPIReadRegUsingCSR &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWriteDWord
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIReadDWord
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIReadDRegister
</UL>

<P><STRONG><a name="[fd]"></a>SPISendAddr</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, spidriver.o(i.SPISendAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SPISendAddr &rArr; SPIWrite &rArr; HAL_SPI_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWritePDRamRegister
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIReadPDRamRegister
</UL>

<P><STRONG><a name="[fc]"></a>SPIWrite</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, spidriver.o(i.SPIWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SPIWrite &rArr; HAL_SPI_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWritePDRamRegister
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWriteBurstMode
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPISendAddr
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIReadPDRamRegister
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWriteDWord
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIReadDWord
</UL>

<P><STRONG><a name="[fe]"></a>SPIWriteBurstMode</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, spidriver.o(i.SPIWriteBurstMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SPIWriteBurstMode &rArr; SPIWrite &rArr; HAL_SPI_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWritePDRamRegister
</UL>

<P><STRONG><a name="[d4]"></a>SPIWriteDWord</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, spidriver.o(i.SPIWriteDWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SPIWriteDWord &rArr; SPIWrite &rArr; HAL_SPI_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWriteRegUsingCSR
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWritePDRamRegister
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIReadRegUsingCSR
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIReadPDRamRegister
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[ff]"></a>SPIWritePDRamRegister</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, spidriver.o(i.SPIWritePDRamRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = SPIWritePDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWriteBurstMode
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWrite
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPISendAddr
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWriteDWord
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIReadDWord
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWriteRegister
</UL>

<P><STRONG><a name="[100]"></a>SPIWriteRegUsingCSR</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, spidriver.o(i.SPIWriteRegUsingCSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = SPIWriteRegUsingCSR &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWriteDWord
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIReadDWord
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWriteRegister
</UL>

<P><STRONG><a name="[cf]"></a>SPIWriteRegister</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, spidriver.o(i.SPIWriteRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = SPIWriteRegister &rArr; SPIWritePDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWriteRegUsingCSR
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWritePDRamRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscWriteIsr
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscWrite
</UL>

<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[f5]"></a>SdoRes</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, sdoserv.o(i.SdoRes))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = SdoRes &rArr; MBX_MailboxSendReq &rArr; MBX_CopyToSendMailbox &rArr; HW_EscRead &rArr; PDI_Isr &rArr; PDO_OutputMapping &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_MailboxSendReq
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOS_SdoInd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOS_SdoRes
</UL>

<P><STRONG><a name="[a0]"></a>SendFragment</STRONG> (Thumb, 346 bytes, Stack size 16 bytes, ecateoe.o(i.SendFragment))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = SendFragment &rArr; MBX_MailboxSendReq &rArr; MBX_CopyToSendMailbox &rArr; HW_EscRead &rArr; PDI_Isr &rArr; PDO_OutputMapping &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_MailboxSendReq
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EOE_ContinueInd
</UL>

<P><STRONG><a name="[88]"></a>SendSmFailedEmergency</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, ecatslv.o(i.SendSmFailedEmergency))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = SendSmFailedEmergency &rArr; EMCY_SendEmergency &rArr; MBX_MailboxSendReq &rArr; MBX_CopyToSendMailbox &rArr; HW_EscRead &rArr; PDI_Isr &rArr; PDO_OutputMapping &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMCY_SendEmergency
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMCY_GetEmcyBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartInputHandler
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSmSettings
</UL>

<P><STRONG><a name="[63]"></a>SetALEventMask</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ecatslv.o(i.SetALEventMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = SetALEventMask &rArr; HW_EscRead &rArr; PDI_Isr &rArr; PDO_OutputMapping &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscRead
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlInd
</UL>

<P><STRONG><a name="[6d]"></a>SetALStatus</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, ecatslv.o(i.SetALStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = SetALStatus &rArr; HW_EscWrite &rArr;  PDI_Isr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscWrite
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPL_GetDeviceID
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECAT_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlRes
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlInd
</UL>

<P><STRONG><a name="[61]"></a>StartInputHandler</STRONG> (Thumb, 1504 bytes, Stack size 56 bytes, ecatslv.o(i.StartInputHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = StartInputHandler &rArr; SendSmFailedEmergency &rArr; EMCY_SendEmergency &rArr; MBX_MailboxSendReq &rArr; MBX_CopyToSendMailbox &rArr; HW_EscRead &rArr; PDI_Isr &rArr; PDO_OutputMapping &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDO_InputMapping
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscRead
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSmFailedEmergency
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSyncMan
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableSyncManChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlInd
</UL>

<P><STRONG><a name="[66]"></a>StartOutputHandler</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, ecatslv.o(i.StartOutputHandler))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlInd
</UL>

<P><STRONG><a name="[65]"></a>StopInputHandler</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, ecatslv.o(i.StopInputHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = StopInputHandler &rArr; ResetALEventMask &rArr; HW_EscRead &rArr; PDI_Isr &rArr; PDO_OutputMapping &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetALEventMask
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableSyncManChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlRes
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlInd
</UL>

<P><STRONG><a name="[69]"></a>StopOutputHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ecatslv.o(i.StopOutputHandler))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlRes
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlInd
</UL>

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[10c]"></a>SystemClock_Config</STRONG> (Thumb, 102 bytes, Stack size 64 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[48]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_stm32f1xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(.text)
</UL>
<P><STRONG><a name="[5c]"></a>UpdateEEPROMLoadedState</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ecatslv.o(i.UpdateEEPROMLoadedState))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = UpdateEEPROMLoadedState &rArr; HW_EscRead &rArr; PDI_Isr &rArr; PDO_OutputMapping &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscRead
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECAT_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlInd
</UL>

<P><STRONG><a name="[6]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[11c]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[11d]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[11e]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[7f]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOE_ServiceInd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFragment
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EOE_ServiceInd
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EOE_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOS_SdoInd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_Main
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdoUploadSegmentInd
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdoDownloadSegmentInd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SODS_ClearPendingResponse
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_MailboxWriteInd
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_StopMailboxHandler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_StartMailboxHandler
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_MailboxReadInd
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_CheckAndCopyMailbox
</UL>

<P><STRONG><a name="[47]"></a>main</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = main &rArr; MainLoop &rArr; ECAT_Main &rArr; MBX_Main &rArr; MailboxServiceInd &rArr; COE_ServiceInd &rArr; SDOS_SdoInd &rArr; SdoRes &rArr; MBX_MailboxSendReq &rArr; MBX_CopyToSendMailbox &rArr; HW_EscRead &rArr; PDI_Isr &rArr; PDO_OutputMapping &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainLoop
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainInit
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPL_GenerateMapping
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[7b]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFragment
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EOE_ServiceInd
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOS_SdoInd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_ContinueInd
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_StartMailboxHandler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_CheckAndCopyMailbox
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMCY_SendEmergency
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[f3]"></a>SdoDownloadSegmentInd</STRONG> (Thumb, 596 bytes, Stack size 32 bytes, sdoserv.o(i.SdoDownloadSegmentInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = SdoDownloadSegmentInd &rArr; OBJ_Write &rArr; OBJ_GetEntryOffset
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_Write
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOS_SdoInd
</UL>

<P><STRONG><a name="[f4]"></a>SdoUploadSegmentInd</STRONG> (Thumb, 388 bytes, Stack size 24 bytes, sdoserv.o(i.SdoUploadSegmentInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SdoUploadSegmentInd &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOS_SdoInd
</UL>

<P><STRONG><a name="[ae]"></a>GetInterruptRegister</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, 9252_hw.o(i.GetInterruptRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = GetInterruptRegister &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscReadIsr
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GetALEventRegister
</UL>

<P><STRONG><a name="[d2]"></a>ISR_GetInterruptRegister</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, 9252_hw.o(i.ISR_GetInterruptRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = ISR_GetInterruptRegister &rArr; HW_EscReadIsr &rArr; SPIReadDRegister &rArr; SPIReadPDRamRegister &rArr; SPIReadDWord &rArr; SPIRead &rArr; HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscReadIsr
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GetALEventRegister_Isr
</UL>

<P><STRONG><a name="[df]"></a>MX_DMA_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, main.o(i.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e0]"></a>MX_GPIO_Init</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, main.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e2]"></a>MX_SPI2_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, main.o(i.MX_SPI2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_SPI2_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4a]"></a>SPI_DMAAbortOnError</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32f1xx_hal_spi.o(i.SPI_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_spi.o(i.HAL_SPI_IRQHandler)
</UL>
<P><STRONG><a name="[4d]"></a>SPI_DMAError</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32f1xx_hal_spi.o(i.SPI_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Address Reference Count : 3]<UL><LI> stm32f1xx_hal_spi.o(i.HAL_SPI_Receive_DMA)
<LI> stm32f1xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
<LI> stm32f1xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
</UL>
<P><STRONG><a name="[4b]"></a>SPI_DMAHalfReceiveCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32f1xx_hal_spi.o(i.SPI_DMAHalfReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_DMAHalfReceiveCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f1xx_hal_spi.o(i.HAL_SPI_Receive_DMA)
<LI> stm32f1xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
</UL>
<P><STRONG><a name="[50]"></a>SPI_DMAHalfTransmitCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32f1xx_hal_spi.o(i.SPI_DMAHalfTransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_DMAHalfTransmitCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
</UL>
<P><STRONG><a name="[4e]"></a>SPI_DMAHalfTransmitReceiveCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32f1xx_hal_spi.o(i.SPI_DMAHalfTransmitReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_DMAHalfTransmitReceiveCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxRxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
</UL>
<P><STRONG><a name="[4c]"></a>SPI_DMAReceiveCplt</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, stm32f1xx_hal_spi.o(i.SPI_DMAReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI_DMAReceiveCplt &rArr; SPI_EndRxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxCpltCallback
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTransaction
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f1xx_hal_spi.o(i.HAL_SPI_Receive_DMA)
<LI> stm32f1xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
</UL>
<P><STRONG><a name="[51]"></a>SPI_DMATransmitCplt</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, stm32f1xx_hal_spi.o(i.SPI_DMATransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SPI_DMATransmitCplt &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxCpltCallback
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
</UL>
<P><STRONG><a name="[4f]"></a>SPI_DMATransmitReceiveCplt</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, stm32f1xx_hal_spi.o(i.SPI_DMATransmitReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI_DMATransmitReceiveCplt &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxRxCpltCallback
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
</UL>
<P><STRONG><a name="[104]"></a>SPI_EndRxTransaction</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, stm32f1xx_hal_spi.o(i.SPI_EndRxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPI_EndRxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAReceiveCplt
</UL>

<P><STRONG><a name="[106]"></a>SPI_EndRxTxTransaction</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, stm32f1xx_hal_spi.o(i.SPI_EndRxTxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitReceiveCplt
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitCplt
</UL>

<P><STRONG><a name="[109]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, stm32f1xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTransaction
</UL>

<P><STRONG><a name="[bf]"></a>RCC_Delay</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f1xx_hal_rcc.o(i.RCC_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[b2]"></a>DMA_SetConfig</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f1xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[b9]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[ba]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
